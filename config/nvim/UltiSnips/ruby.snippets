snippet nrcs "describe Api::V1::Controller"
require "spec_helper"

describe Api::V1::${1:Foo}Controller, type: :request do
	${0}
end
endsnippet

snippet nrs "describe 'GET /api/...'"
describe "${1:GET} /api/$2" do
	context "not authenticated" do
		before do
			${1/\w/\l$0/g} "/api/${2}", {}, api_header(version: 1)
		end

		it { expect(response.status).to eq(401) }
		it "should return a blank response" do
			expect(response.body.strip).to be_empty
		end
	end

	context "authenticated" do
		${0}
	end
end
endsnippet

snippet aget "get '/api/...', {}, api_header(...)"
get "/api/${1:path}", {}, api_header(version: 1${2:, token: token})
${0}
endsnippet

snippet apost "post '/api/...', attributes, api_header(...)"
post "/api/${1:path}", ${2:attributes}, api_header(version: 1${3:, token: token})
${0}
endsnippet

snippet create "create(:object)"
$1 = create(:${1:object}${2:,:trait})
${0}
endsnippet

snippet nsz "class Serializer"
class ${1:Foo}Serializer < ActiveModel::Serializer
  attributes :${0}
end
endsnippet

snippet isvl 
it { should validate_length_of(:$1).is_at_most($2) }$0
endsnippet
snippet isfp
it { should filter_param :${0:key} }
endsnippet
snippet isrt
it { should redirect_to ${0:url} }
endsnippet
snippet isrtp
it { should render_template ${0} }
endsnippet
snippet isrwl
it { should render_with_layout ${0} }
endsnippet
snippet isrf
it { should rescue_from ${0:exception} }
endsnippet
snippet isrw
it { should respond_with ${0:status} }
endsnippet
snippet isr
it { should route(:${1:method}, '${0:path}') }
endsnippet
snippet isss
it { should set_session :${0:key} }
endsnippet
snippet issf
it { should set_the_flash('${0}') }
endsnippet
snippet isama
it { should allow_mass_assignment_of :${0} }
endsnippet
snippet isav
it { should allow_value(${1}).for :${0} }
endsnippet
snippet isee
it { should ensure_exclusion_of :${0} }
endsnippet
snippet isei
it { should ensure_inclusion_of :${0} }
endsnippet
snippet isel
it { should ensure_length_of :${0} }
endsnippet
snippet isva
it { should validate_acceptance_of :${0} }
endsnippet
snippet isvc
it { should validate_confirmation_of :${0} }
endsnippet
snippet isvn
it { should validate_numericality_of :${0} }
endsnippet
snippet isvp
it { should validate_presence_of :${0} }
endsnippet
snippet isvu
it { should validate_uniqueness_of :${0} }
endsnippet
snippet isana
it { should accept_nested_attributes_for :${0} }
endsnippet
snippet isbt
it { should belong_to :${0} }
endsnippet
snippet isbtcc
it { should belong_to(:${1}).counter_cache ${0:true} }
endsnippet
snippet ishbtm
it { should have_and_belong_to_many :${0} }
endsnippet
snippet isbv
it { should be_valid }
endsnippet
snippet ishc
it { should have_db_column :${0} }
endsnippet
snippet ishi
it { should have_db_index :${0} }
endsnippet
snippet ishm
it { should have_many :${0} }
endsnippet
snippet ishmt
it { should have_many(:${1}).through :${0} }
endsnippet
snippet isho
it { should have_one :${0} }
endsnippet
snippet ishro
it { should have_readonly_attribute :${0} }
endsnippet
snippet iss
it { should serialize :${0} }
endsnippet
snippet isres
it { should respond_to :${0} }
endsnippet
snippet isresw
it { should respond_to(:${1}).with(${0}).arguments }
endsnippet
snippet mac
add_column :${1:table_name}, :${2:column_name}, :${0:data_type}
endsnippet
snippet mai
add_index :${1:table_name}, :${0:column_name}
endsnippet
snippet mrc
remove_column :${1:table_name}, :${0:column_name}
endsnippet
snippet mrnc
rename_column :${1:table_name}, :${2:old_column_name}, :${0:new_column_name}
endsnippet
snippet mcc
change_column :${1:table}, :${2:column}, :${0:type}
endsnippet
snippet mnc
t.${1:string} :${2:title}${3:, null: false}
endsnippet
snippet mct
create_table :${1:table_name} do |t|
	${0}
end
endsnippet
snippet trc
t.remove :${0:column}
endsnippet
snippet tre
t.rename :${1:old_column_name}, :${2:new_column_name}
${0}
endsnippet
snippet tref
t.references :${0:model}
endsnippet
snippet tcb
t.boolean :${1:title}
${0}
endsnippet
snippet tcbi
t.binary :${1:title}, limit: ${2:2}.megabytes
${0}
endsnippet
snippet tcd
t.decimal :${1:title}, precision: ${2:10}, scale: ${3:2}
${0}
endsnippet
snippet tcda
t.date :${1:title}
${0}
endsnippet
snippet tcdt
t.datetime :${1:title}
${0}
endsnippet
snippet tcf
t.float :${1:title}
${0}
endsnippet
snippet tch
t.change :${1:name}, :${2:string}, ${3:limit}: ${4:80}
${0}
endsnippet
snippet tci
t.integer :${1:title}
${0}
endsnippet
snippet tcl
t.integer :lock_version, null: false, default: 0
${0}
endsnippet
snippet tcr
t.references :${1:taggable}, polymorphic: { default: '${2:Photo}' }
${0}
endsnippet
snippet tcs
t.string :${1:title}
${0}
endsnippet
snippet tct
t.text :${1:title}
${0}
endsnippet
snippet tcti
t.time :${1:title}
${0}
endsnippet
snippet tcts
t.timestamp :${1:title}
${0}
endsnippet
snippet tctss
t.timestamps
${0}
endsnippet
snippet bt
belongs_to :${0:model}
endsnippet
snippet hm
has_many :${0:model}
endsnippet
