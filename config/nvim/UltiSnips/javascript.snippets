global !p
import re

def camelCase(input):
	parts = re.findall(r"[^-_]+",input)
	if len(parts) == 0:
		return ""
	camelParts = parts[0:1]+map(lambda s: s.title(), parts[1:])
	return str.join("",camelParts)

def nameForRequire(path):
	return camelCase(path.split("/")[-1].split(".")[0])

endglobal

snippet uses "use strict" b
'use strict';

$0
endsnippet

snippet cl "console.log" b
console.log($0);
endsnippet

snippet ff "console.info('var', var)" b
console.info('$1', ${1:var});
endsnippet

snippet debug "debugger;" b
debugger;
endsnippet

snippet for "for()" b
for (let ${1:i} = 0; $1 < ${2:n}; $1++) {
	$0
}
endsnippet

snippet it "it('should ...', () => {})"
it('${1:should ...}', () => {
	$0
})
endsnippet

snippet ita "it('should ...', async () => {})"
it('${1:should ...}', async () => {
	$0
})
endsnippet

snippet itd "it('should ...', (done) => {})"
it('${1:should ...}', (done) => {
	$0
	done()
})
endsnippet

snippet exp "expect()"
expect($1).$0
endsnippet

snippet desc "describe(...)" b
describe('${1:`!p snip.rv = ''.join(x.title() for x in re.sub('(\.spec|\.js)$', '', snip.basename or 'ModuleName').split('_'))`}', () => {
	$0
})
endsnippet

snippet imp "import fooBar from 'foo-bar'" b
import `!p
def formatVariableName(path):
	lastPart = path.split('/')[-1]
	name = re.sub(r'[_\-]', '', lastPart.title())
	return name[:1].lower() + name[1:]
snip.rv = formatVariableName(re.sub('\.js$', '', t[1]))
` from '${1}'$0
endsnippet

snippet impc "import Foo from 'foo'" b
import `!p
def formatVariableName(path):
	lastPart = path.split('/')[-1]
	if lastPart == 'underscore':
		return '_'
	elif lastPart == 'jquery':
		return '$'
	else:
		return re.sub(r'[_\-]', '', lastPart.title())
snip.rv = formatVariableName(re.sub('\.js$', '', t[1]))
` from '${1}'$0
endsnippet

snippet isc "import styled from 'styled-components'" b
import styled from 'styled-components';$0
endsnippet

snippet sc "export const Component = styled.tag``" b
export const ${1:Component} = styled.${2:div}\`
$0
\`;
endsnippet

snippet impprop "import PropTypes from 'prop-types'" b
import PropTypes from 'prop-types';
endsnippet

snippet ac "export const actionCreator = ({ type: '' })" b
export const $1 = ($2) => ({
	type: $3
});
endsnippet

snippet ce "export const fooEpic = (action$, store)" b
export const $1Epic = (action$, store) =>
	action$
		.ofType($2)
		.$3
endsnippet

snippet po "foo: PropTypes.object," b
$1: PropTypes.object,
endsnippet

snippet por "foo: PropTypes.object.isRequired," b
$1: PropTypes.object.isRequired,
endsnippet

snippet ps "foo: PropTypes.string," b
$1: PropTypes.string,
endsnippet

snippet psr "foo: PropTypes.string.isRequired," b
$1: PropTypes.string.isRequired,
endsnippet

snippet pf "foo: PropTypes.func," b
$1: PropTypes.func,
endsnippet

snippet pfr "foo: PropTypes.func.isRequired," b
$1: PropTypes.func.isRequired,
endsnippet

snippet pb "foo: PropTypes.bool," b
$1: PropTypes.bool,
endsnippet

snippet pbr "foo: PropTypes.bool.isRequired," b
$1: PropTypes.bool.isRequired,
endsnippet
